# -*- coding: utf-8 -*-
"""Assistente de receita

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vwVV89C9d-eWrnbNXPy4YxnxPpQZhQ2W
"""

# Instalar o pacote necessário do Google Gemini e ADK
!pip install -q --upgrade google-generativeai google-adk

import os
from google.colab import userdata
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import display, Markdown

# Configurar a chave da API do Google Gemini
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')  # Certifique-se de que a chave da API está configurada corretamente
client = genai.Client()

MODEL_ID = "gemini-2.0-flash"  # Modelo Gemini a ser usado

# Função auxiliar para chamar o agente e retornar a resposta
def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
                    final_response += "\n"
    return final_response

# Agente Buscador de Receitas
def agente_buscador_ingredientes(ingrediente):
    buscador = Agent(
        name="agente_buscador_ingredientes",
        model="gemini-2.0-flash",
        description="Busca receitas baseadas em ingredientes fornecidos.",
        tools=[google_search],
        instruction=f"""
            Você é um assistente culinário. Sua tarefa é buscar receitas relacionadas ao ingrediente fornecido.
            A busca deve trazer receitas populares e fáceis de fazer com esse ingrediente.
        """
    )
    entrada_do_agente_buscador = f"Ingrediente: {ingrediente}"
    receitas_buscadas = call_agent(buscador, entrada_do_agente_buscador)
    return receitas_buscadas

# Agente Planejador de Receitas
def agente_planejador_receita(ingrediente, receitas_buscadas):
    planejador = Agent(
        name="agente_planejador_receita",
        model="gemini-2.0-flash",
        instruction=f"""
            Você é um planejador de receitas. Com base nas receitas encontradas para o ingrediente '{ingrediente}',
            elabore um passo a passo para preparar a receita, incluindo porções e sugestões de variações.
        """,
        description="Agente que planeja receitas de culinária."
    )
    entrada_do_agente_planejador = f"Ingrediente: {ingrediente}\nReceitas encontradas: {receitas_buscadas}"
    plano_da_receita = call_agent(planejador, entrada_do_agente_planejador)
    return plano_da_receita

#Agente Redator de Receitas
def agente_redator_receita(plano_de_receita):
    redator = Agent(
        name="agente_redator_receita",
        model="gemini-2.0-flash",
        instruction=f"""
            Você é um redator criativo especializado em criar receitas detalhadas. Com base no plano fornecido,
            escreva uma receita passo a passo, com ingredientes, quantidades, modo de preparo, e sugestões de variações.
        """,
        description="Agente redator de receitas culinárias."
    )
    entrada_do_agente_redator = f"Plano da Receita: {plano_de_receita}"
    rascunho_receita = call_agent(redator, entrada_do_agente_redator)
    return rascunho_receita

# Agente Revisor de Receitas
def agente_revisor_receita(rascunho_receita):
    revisor = Agent(
        name="agente_revisor_receita",
        model="gemini-2.0-flash",
        instruction=f"""
            Você é um revisor de receitas. Analise o rascunho da receita abaixo e verifique a clareza, precisão
            e concisão. Corrija se necessário e deixe a receita pronta para ser compartilhada.
        """,
        description="Agente revisor de receitas culinárias."
    )
    entrada_do_agente_revisor = f"Rascunho da Receita: {rascunho_receita}"
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

# Exemplo de uso
ingrediente = input("Digite o ingrediente para buscar receitas: ")
data_de_hoje = date.today().strftime("%d/%m/%Y")

receitas_buscadas = agente_buscador_ingredientes(ingrediente)
print("buscando receita......Aguarde...")
plano_de_receita = agente_planejador_receita(ingrediente, receitas_buscadas)
print("Planejando a receita......Meu mago(a)")
rascunho_receita = agente_redator_receita(plano_de_receita)
print("Redatando a receita......Agora falta pouco")
texto_revisado = agente_revisor_receita(rascunho_receita)
print("Revisorando a receita......")

# Exibindo o resultado final
print(f"Texto revisado da receita:\n{texto_revisado}")